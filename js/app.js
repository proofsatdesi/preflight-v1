var jsonpUrl = function(jobNumber) {
	var baseUrl = 'https://desi.com/api/jobtracker/jobs/';
	var callbackSuffix = '?callback=JSON_CALLBACK';

	if (!(parseFloat(jobNumber) > 10000))
		throw new Error('invalid job number passed to jsonpUrl()');

	return baseUrl + jobNumber + callbackSuffix;
};
var sortMsgList = function(msgArray) {
	window.console.log("sortMsgList is called");
	// return sorted msgArray
	// return [{
	// 	type: "info",
	// 	msg: "Make sure that elements are nicely centered."
	// }];
	var typeToInt = {
		danger: 0,
		warning: 1,
		info: 2,
		success: 3,
	};

	return msgArray.sort(function(a, b) {
		return typeToInt[a.type] - typeToInt[b.type];
	});
};


var preflight = function(jobOb, taskList) {

	var results = [];
	var returnVal;
	var debugCounter = 0;

	taskList.forEach(function(task) {

		if (task.statuses.indexOf(jobOb.current_status_id) > -1) {
			returnVal = task.test(jobOb);

			if (returnVal !== undefined) {
				results = results.concat(returnVal);
			}
		}

	});
	if (results.length > 0) {
		return results;
	}
		
};

angular.module('preflight', ['ui.bootstrap', 'ngResource', 'preflightTaskList', 'ngCookies'])
.controller('preflightCtrl', ['$scope', '$window', '$http', 'preflightTasks', '$cookieStore', function($scope, $window, $http, preflightTasks, $cookieStore) {
	$scope.model = {};

	// publish "headline" to user: 
	// pleasse enter a job number, loading job, running preflight, preflight complete
	$scope.model.headline = "awaiting job number.";
	$scope.model.isRush = false;
	$scope.model.userNameEntered = false;
	$scope.model.userNameFocus = true;
	$scope.model.jobNumberFocus = false;


	// publish a list of messages generated by preflight prcoess
	$scope.model.msgList = [
		{
			type: "info",
			msg: "your name will be remembered between sessions!",
			footnote: ["...only when running off the hosted version."]
		},
		{
			type: "success",
			msg: "Prepress is testing this on live approvals",
			footnote: ["• part number to die number lookups are happening by HAND until Nate finishes the new sales manager API, so you might get a crazy result!", "• the paper lookup is a bit dicey, keep your eyes open"]
		}
	];

	// $scope.sortMsgType = function(msg) {
	// 	var typeToInt = {
	// 		danger: 0,
	// 		warning: 1,
	// 		info: 2,
	// 		success: 3,
	// 	};
	// 	return typeToInt[msg.type];
	// };
	var changeFocusToJobNumber = function() {
		$scope.model.userNameEntered = true;
		$scope.model.userNameFocus = false;
		$scope.model.jobNumberFocus = true;
	};

	var init = function() {
		if ($cookieStore.get('userName')) {
			$scope.model.userName = $cookieStore.get('userName');
			window.console.log("about to call changeFocusToJobNumber");
			changeFocusToJobNumber();
		}
	};
	init();

	

	$scope.submitUserName = function() {
		if ($scope.model.userName) {
			$cookieStore.put('userName', $scope.model.userName);
			changeFocusToJobNumber();
		}
		
	};
	// TODO make it so that a tab out of username field also calls the form submit!
	// lose the model.userName watch ?  make it more of a submit?

	// $scope.$watch('model.userName', function() {
	// 	// $scope.model.userName = model.userName;
	// 	$cookieStore.put('userName', $scope.model.userName);
	// 	// $scope.submitUserName();
	// });
	$scope.editUserName = function() {
		$scope.model.userNameEntered = false;
		$scope.model.userNameFocus = true;

	};

	$scope.closePanel = function(i) {
		$scope.model.msgList.splice(i, 1);
	};

	$scope.fetchJob = function(formIsValid) {
		if (!formIsValid) {
			$scope.model.headline = "awaiting valid job number...";
			return
		}

		$scope.model.msgList = [];
		$scope.model.headline = "Attempting to retrieve job from server...";

		var responsePromise = $http.jsonp(jsonpUrl($scope.model.jobNumber));


		responsePromise.success(function(data) {
			$scope.model.headline = "Job found! ...Beginning preflight...";
			//here
			$scope.model.isRush = (data.production_days < 4);
			$scope.model.msgList = $scope.model.msgList.concat(preflight(data, preflightTasks));

			$scope.model.msgList.push({
				type: "success",
				msg: "Preflight has performed " + preflightTasks.length + " tests."
			}); // strangely, this test is needed to make situations with ONLY 1 returned message work properly...NO idea where that bug is....

			if ($scope.model.msgList.length > 1) {
				$scope.model.msgList = sortMsgList($scope.model.msgList);
			} 

			$scope.model.headline = "Preflight complete.";
		});

		responsePromise.error(function() {
			$scope.model.headline = "we were unable to fetch job " + $scope.model.jobNumber;
		});
		


	};


	

	

}])
.directive('focus', function($timeout, $parse) {
    return {
      restrict: 'A',
      link: function(scope, element, attrs) {
          scope.$watch(attrs.focus, function(newValue, oldValue) {
              if (newValue) { element[0].focus(); }
          });
          element.bind("blur", function(e) {
              $timeout(function() {
                  scope.$apply(attrs.focus + "=false"); 
              }, 0);
          });
          element.bind("focus", function(e) {
              $timeout(function() {
                  scope.$apply(attrs.focus + "=true");
              }, 0);
          })
      }
    }
  });

